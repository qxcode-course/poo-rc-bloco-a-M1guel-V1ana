{
    "patches": [
        {
            "label": "2025-09-17_23-31-18",
            "content": "@@ -1,297 +0,0 @@\n-class Towel:%0A    def __init__(self):%0A        self.color : str = %22%22%0A        self.size : str = %22%22%0A        self.wetness : int = 0 %0A%0Aminha = Towel()%0Aminha.color = %22rosinha %22%0Aminha.size = %22G%22%0A%0Ahellys = Towel()%0Ahellys.color = %22vermelha%22%0Ahellys.size = %22M%22%0A%0Aprint(f%22a cor da sua toalha %C3%A9 %7Bhellys.color%7D%22)%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-09-19_21-34-44",
            "content": "@@ -4,17 +4,16 @@\n ss Towel\n-l\n :%0A    de\n@@ -31,31 +31,8 @@\n self\n-, color : str, size:str\n ):%0A \n@@ -48,24 +48,25 @@\n lf.color\n+ \n : str = \n color%0A  \n@@ -57,21 +57,18 @@\n : str = \n-color\n+%22%22\n %0A       \n@@ -77,24 +77,25 @@\n elf.size\n+ \n : str = \n size%0A   \n@@ -86,20 +86,18 @@\n : str = \n-size\n+%22%22\n %0A       \n@@ -109,16 +109,17 @@\n .wetness\n+ \n : int = \n@@ -123,591 +123,175 @@\n  = 0\n+ \n %0A%0A\n-def getMaxwetness(self) -%3E int:%0A    if self.size == %22P%22:%0A        return 10%0A    if self.size == %22M%22:%0A        return 20%0A    if self\n+minha = Towel()%0Aminha.color = %22rosinha %22%0Aminha\n .size =\n-=\n  %22G%22\n-:%0A        return 30%0A        return 0%0A%0Adef dry(self, amount: int) -%3E None:%0A    self.wetnes\n+%0A%0Ahelly\n s \n-+\n = \n-amount%0A    if self.wetness %3E self.getMaxwetness():%0A        print(%22toalha encharcada%22)%0A    self.wetness = self.getMaxwetness()%0A%0Adef wringOut(self) -%3E None:%0A    self.wetness = 0%0Adef isDry(self) -%3E bool:%0A    return self.wetness == 0%0Adef show(self) -%3E None:%0A    print(self)%0Adef __str__(self) -%3E str:%0A    return f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22\n+Towel()%0Ahellys.color = %22vermelha%22%0Ahellys.size = %22M%22%0A%0Aprint(f%22a cor da sua toalha %C3%A9 %7Bhellys.color%7D%22)\n %0A\n",
            "lines": "15"
        },
        {
            "label": "2025-09-19_22-09-46",
            "content": "@@ -4,16 +4,17 @@\n ss Towel\n+l\n :%0A    de\n@@ -31,24 +31,25 @@\n (self, color\n+ \n : str, size:\n@@ -52,27 +52,13 @@\n ize:\n- \n str):\n- # construtor\n %0A   \n@@ -89,20 +89,8 @@\n olor\n- # atributos\n %0A   \n@@ -150,301 +150,20 @@\n = 0%0A\n-    %0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            print(%22toalha saturada, ensopada, pingando%22)%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def isMaxW\n+%0Adef getMaxw\n etne\n@@ -179,28 +179,24 @@\n -%3E int:%0A    \n- \n-   \n if self.size\n@@ -207,23 +207,8 @@\n %22P%22:\n- # early return\n %0A   \n@@ -208,28 +208,24 @@\n P%22:%0A        \n-    \n return 10%0A  \n@@ -222,20 +222,16 @@\n turn 10%0A\n-    \n     if s\n@@ -251,28 +251,24 @@\n M%22:%0A        \n- \n-   \n return 20%0A  \n@@ -265,20 +265,16 @@\n turn 20%0A\n-    \n     if s\n@@ -294,28 +294,24 @@\n G%22:%0A        \n-  \n-  \n return 30%0A  \n@@ -328,721 +328,320 @@\n rn 0\n- # default return%0A%0A    def __str__(self) -%3E str: # toString%0A        return f%22Color:%7Bself.color%7D, Size:%7Bself.size%7D, Wet:%7Bself.wetness%7D%22%0A%0Adef main\n+%0A%0Adef dry(self, amount: int) -%3E None:%0A    self.wetness += amount%0A    if self.wetness %3E self.getMaxwetness\n ():\n- \n %0A    \n-towel: Towel = Towel(%22%22, %22%22) # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A        line: str = input() # 4: perguntar ao usuario%0A        args: list%5Bstr%5D = line.split(%22 %22) # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22new%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22dry%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22show%22:%0A        \n+    print(%22toalha encharcada%22)%0A    self.wetness = self.getMaxwetness()%0A%0Adef wringOut(self) -%3E None:%0A    self.wetness = 0%0Adef isDry(self) -%3E bool:%0A    return self.wetness == 0%0Adef show(self) -%3E None:%0A\n     \n@@ -650,103 +650,90 @@\n int(\n-tow\n+s\n el\n+f\n )%0A\n-        else: # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0Amain() # passo 1\n+def __str__(self) -%3E str:%0A    return f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22\n %0A\n",
            "lines": "29"
        },
        {
            "label": "2025-09-23_20-51-13",
            "content": "@@ -1480,9 +1480,18 @@\n %0Amain() \n+# passo 1\n %0A\n",
            "lines": "49"
        },
        {
            "label": "2025-09-23_18-31-43",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): # construtor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha saturada, ensopada, pingando\")\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\": # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # default return\n\n    def __str__(self) -> str: # toString\n        return f\"Color:{self.color}, Size:{self.size}, Wet:{self.wetness}\"\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\") # 2: criar um obj com qq valor inicial\n    while True: # 3: loop infinito\n\n        line: str = input() # 4: perguntar ao usuario\n        args: list[str] = line.split(\" \") # 5: separar argumentos\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"new\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"dry\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"show\":\n            print(towel)\n        else: # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain() \n",
            "lines": "49"
        }
    ]
}